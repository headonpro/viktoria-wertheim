name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_PATH: /opt/devserver/projects/viktoria-wertheim

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if secrets are set
        run: |
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "❌ ERROR: VPS_HOST secret is not set!"
            echo "Please add the following secrets to your repository:"
            echo "1. Go to: https://github.com/headonpro/viktoria-wertheim/settings/secrets/actions"
            echo "2. Add these secrets:"
            echo "   - VPS_HOST: 91.98.117.169"
            echo "   - VPS_USER: root"
            echo "   - VPS_SSH_KEY: (the private key)"
            exit 1
          fi
          echo "✅ Secrets appear to be configured"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '✅ SSH connection successful'"

      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            set -e
            echo "🚀 Starting deployment..."
            
            # Navigate to project directory
            cd ${{ env.PROJECT_PATH }}
            
            # Git pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin main
            git reset --hard origin/main
            
            # Apply database migrations
            if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations/*.sql 2>/dev/null)" ]; then
              echo "📦 Applying database migrations..."
              for migration in supabase/migrations/*.sql; do
                if [ -f "$migration" ]; then
                  filename=$(basename "$migration")
                  echo "  Applying: $filename"
                  docker exec -i supabase-db psql -U postgres < "$migration" 2>&1 || echo "  ⚠️  Migration may have already been applied"
                fi
              done
              echo "✅ Migrations complete"
            fi
            
            # Sync database data
            if [ -d "supabase/data-sync" ] && [ "$(ls -A supabase/data-sync/*.sql 2>/dev/null)" ]; then
              echo "🔄 Syncing database data..."
              for datafile in supabase/data-sync/*.sql; do
                if [ -f "$datafile" ]; then
                  filename=$(basename "$datafile")
                  echo "  Importing: $filename"
                  # Clear existing data and import new data
                  docker exec -i supabase-db psql -U postgres < "$datafile"
                fi
              done
              echo "✅ Data sync complete"
            fi
            
            # Copy production environment file
            echo "📋 Setting up environment..."
            if [ -f .env.production.vps ]; then
              cp .env.production.vps .env.production
            fi
            
            # Build and deploy with Docker
            echo "🐳 Building Docker image..."
            docker build -t viktoria-frontend-final -f Dockerfile.production .
            
            # Stop existing container
            echo "🛑 Stopping existing container..."
            docker stop viktoria-frontend || true
            docker rm viktoria-frontend || true
            
            # Start new container
            echo "✨ Starting new container..."
            docker run -d \
              --name viktoria-frontend \
              --restart unless-stopped \
              --network supabase_default \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_SUPABASE_URL=http://91.98.117.169:8000 \
              -e NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE \
              -e NEXT_PUBLIC_ADMIN_PASSWORD=Vkt2025SecureAdmin \
              viktoria-frontend-final
            
            # Health check
            echo "🔍 Checking deployment..."
            sleep 5
            docker ps | grep viktoria-frontend
            
            # Clean up old images
            echo "🧹 Cleaning up..."
            docker image prune -f
            
            echo "✅ Deployment complete!"
          ENDSSH

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key