name: Automated Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '22.18.0'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm run typecheck

      - name: Run linting
        run: pnpm run lint

      # TODO: Uncomment when tests are implemented
      # - name: Run unit tests
      #   run: pnpm run test:unit

      # - name: Upload test coverage
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./coverage/lcov.info

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          # Wait for postgres to be ready
          sleep 5
          
          # TODO: Run database migrations for test environment
          # psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      # TODO: Uncomment when integration tests are implemented
      # - name: Run integration tests
      #   run: pnpm run test:integration
      #   env:
      #     DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      #     NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
      #     NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: NODE_ENV=test pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key

      - name: Start test server
        run: |
          NODE_ENV=test pnpm start &
          echo $! > server.pid
          sleep 10
        env:
          PORT: 3000
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key

      - name: API Health Check
        run: |
          # Test API health endpoint
          curl -f http://localhost:3000/api/health || exit 1
          
          # Test API endpoints that don't require auth
          curl -f http://localhost:3000/api/teams || exit 1
          curl -f http://localhost:3000/api/news || exit 1

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Check for secrets in code
        run: |
          # Simple regex check for potential secrets
          if grep -r -E "(password|secret|key|token).*(=|:).*(\"[^\"]{20,}\"|'[^']{20,}')" src/ --exclude-dir=node_modules; then
            echo "‚ùå Potential secrets found in code!"
            exit 1
          else
            echo "‚úÖ No obvious secrets found in code"
          fi

      - name: Check for TODO security items
        run: |
          # Check for security-related TODOs
          if grep -r -i "TODO.*security\|FIXME.*security\|XXX.*security" src/; then
            echo "‚ö†Ô∏è Security-related TODOs found - please address before production"
          fi

  lighthouse-tests:
    name: Lighthouse Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: NODE_ENV=production pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key

      - name: Start production server
        run: |
          NODE_ENV=production pnpm start &
          echo $! > server.pid
          sleep 15
        env:
          PORT: 3000

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Stop production server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  dependency-tests:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          pnpm outdated || true

      - name: Check bundle size
        run: |
          echo "üìä Analyzing bundle size..."
          NODE_ENV=production pnpm run build
          
          # Check if bundle size is reasonable (basic check)
          BUILD_SIZE=$(du -sh .next/ | cut -f1)
          echo "Build size: $BUILD_SIZE"
          
          # Simple size warning (you can adjust these thresholds)
          BUILD_SIZE_MB=$(du -sm .next/ | cut -f1)
          if [ $BUILD_SIZE_MB -gt 100 ]; then
            echo "‚ö†Ô∏è Build size is large: ${BUILD_SIZE_MB}MB"
          else
            echo "‚úÖ Build size is reasonable: ${BUILD_SIZE_MB}MB"
          fi
        env:
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key

      - name: Check for duplicate dependencies
        run: |
          echo "üîç Checking for duplicate dependencies..."
          npx find-duplicate-dependencies || true