name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  PROJECT_PATH: /opt/devserver/projects/viktoria-wertheim
  NODE_VERSION: '22.18.0'

jobs:
  # Phase 1: Code Quality & Testing
  test:
    name: Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm run typecheck

      - name: Linting
        run: pnpm run lint

      - name: Build check
        run: |
          NODE_ENV=production pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      # TODO: Add unit tests when available
      # - name: Unit Tests
      #   run: pnpm run test

  # Phase 2: Security & Vulnerability Checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level high

      - name: Check for outdated dependencies
        run: pnpm outdated || true

  # Phase 3: Production Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "❌ ERROR: VPS_HOST secret is not set!"
            echo "Please add the following secrets to your repository:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Add these secrets:"
            echo "   - VPS_HOST: your-server-ip"
            echo "   - VPS_USER: your-ssh-user"
            echo "   - VPS_SSH_KEY: your-private-ssh-key"
            echo "   - SUPABASE_URL: your-supabase-url"
            echo "   - SUPABASE_ANON_KEY: your-supabase-anon-key"
            exit 1
          fi
          echo "✅ Required secrets appear to be configured"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '✅ SSH connection successful'"

      - name: Pre-deployment backup
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            set -e
            cd ${{ env.PROJECT_PATH }}
            
            echo "📦 Creating pre-deployment backup..."
            ./scripts/backup-database.sh
            
            # Store current container ID for potential rollback
            CURRENT_CONTAINER=$(docker ps --filter "name=viktoria-frontend" --format "{{.ID}}" | head -1)
            echo "Current container: $CURRENT_CONTAINER" > /tmp/deployment-rollback-info
          ENDSSH

      - name: Deploy to VPS
        id: deploy
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            set -e
            echo "🚀 Starting deployment..."
            
            # Navigate to project directory
            cd ${{ env.PROJECT_PATH }}
            
            # Store old container info before deployment
            OLD_CONTAINER=$(docker ps --filter "name=viktoria-frontend" --format "{{.ID}}" | head -1)
            
            # Git pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin main
            git reset --hard origin/main
            
            # Apply database migrations
            if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations/*.sql 2>/dev/null)" ]; then
              echo "📦 Applying database migrations..."
              for migration in supabase/migrations/*.sql; do
                if [ -f "$migration" ]; then
                  filename=$(basename "$migration")
                  echo "  Applying: $filename"
                  docker exec -i supabase-db psql -U postgres < "$migration" 2>&1 || echo "  ⚠️  Migration may have already been applied"
                fi
              done
              echo "✅ Migrations complete"
            fi
            
            # Sync database data
            if [ -d "supabase/data-sync" ] && [ "$(ls -A supabase/data-sync/*.sql 2>/dev/null)" ]; then
              echo "🔄 Syncing database data..."
              for datafile in supabase/data-sync/*.sql; do
                if [ -f "$datafile" ]; then
                  filename=$(basename "$datafile")
                  echo "  Importing: $filename"
                  docker exec -i supabase-db psql -U postgres < "$datafile"
                fi
              done
              echo "✅ Data sync complete"
            fi
            
            # Copy production environment file
            echo "📋 Setting up environment..."
            if [ -f .env.production.vps ]; then
              cp .env.production.vps .env.production
            fi
            
            # Build new Docker image with build args
            echo "🐳 Building Docker image..."
            docker build \
              --build-arg NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
              --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
              -t viktoria-frontend-final \
              -f Dockerfile.production .
            
            # Start new container (blue-green deployment)
            echo "✨ Starting new container..."
            docker run -d \
              --name viktoria-frontend-new \
              --restart unless-stopped \
              --network supabase_default \
              -p 3001:3000 \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
              -e NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
              -e NEXT_PUBLIC_ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} \
              viktoria-frontend-final
            
            # Wait for new container to be healthy
            echo "🔍 Waiting for new container to be ready..."
            sleep 10
            
            # Health check on new container
            NEW_CONTAINER_IP=$(docker inspect viktoria-frontend-new --format '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
            for i in {1..30}; do
              if docker exec viktoria-frontend-new curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "✅ New container health check passed"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "❌ New container failed health check"
                docker logs viktoria-frontend-new --tail 20
                exit 1
              fi
              echo "⏳ Waiting for health check... ($i/30)"
              sleep 2
            done
            
            # Switch traffic to new container (atomic switch)
            echo "🔄 Switching traffic to new container..."
            
            # Remove old port mapping and add new one
            if [ ! -z "$OLD_CONTAINER" ]; then
              docker stop viktoria-frontend || true
              sleep 2
            fi
            
            # Rename containers for clean switch
            docker stop viktoria-frontend-new
            docker rename viktoria-frontend-new viktoria-frontend-temp 2>/dev/null || true
            docker rm viktoria-frontend 2>/dev/null || true
            docker rename viktoria-frontend-temp viktoria-frontend
            
            # Start with correct port mapping
            docker start viktoria-frontend
            docker update --restart unless-stopped viktoria-frontend
            
            # Update port mapping
            docker stop viktoria-frontend
            docker run -d \
              --name viktoria-frontend-final \
              --restart unless-stopped \
              --network supabase_default \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
              -e NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
              -e NEXT_PUBLIC_ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} \
              viktoria-frontend-final
            
            # Final cleanup
            docker rm viktoria-frontend 2>/dev/null || true
            docker rename viktoria-frontend-final viktoria-frontend
            
            # Final health check
            echo "🏥 Final deployment health check..."
            sleep 5
            for i in {1..10}; do
              if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "✅ Deployment health check passed"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ Final health check failed"
                exit 1
              fi
              sleep 3
            done
            
            # Clean up old images (keep last 2)
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            echo "✅ Deployment complete!"
            echo "🌐 Application is live at: https://viktoria.headon.pro"
          ENDSSH

      - name: Post-deployment verification
        run: |
          echo "🔍 Verifying deployment..."
          sleep 10
          
          # Check if site is responding
          if curl -f -s https://viktoria.headon.pro/api/health > /dev/null; then
            echo "✅ Production site is responding"
            curl -s https://viktoria.headon.pro/api/health | jq '.'
          else
            echo "❌ Production site health check failed"
            exit 1
          fi

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Site: https://viktoria.headon.pro"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"

  # Rollback job (manual trigger only)
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && contains(github.event.inputs.rollback_reason, 'emergency')
    environment: production
    
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Rollback deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            set -e
            echo "🔄 Starting emergency rollback..."
            
            cd ${{ env.PROJECT_PATH }}
            
            # Check if rollback info exists
            if [ -f /tmp/deployment-rollback-info ]; then
              ROLLBACK_CONTAINER=$(cat /tmp/deployment-rollback-info | grep "Current container" | cut -d: -f2 | tr -d ' ')
              
              if [ ! -z "$ROLLBACK_CONTAINER" ] && docker ps -a --filter "id=$ROLLBACK_CONTAINER" --format "{{.ID}}" | grep -q "$ROLLBACK_CONTAINER"; then
                echo "🔄 Rolling back to container: $ROLLBACK_CONTAINER"
                
                # Stop current container
                docker stop viktoria-frontend || true
                
                # Start old container
                docker start $ROLLBACK_CONTAINER || true
                docker rename $ROLLBACK_CONTAINER viktoria-frontend-rollback || true
                
                # Switch port mapping
                docker run -d \
                  --name viktoria-frontend \
                  --restart unless-stopped \
                  --network supabase_default \
                  -p 3000:3000 \
                  viktoria-frontend-rollback
                
                echo "✅ Rollback completed"
              else
                echo "❌ No valid rollback target found"
                exit 1
              fi
            else
              echo "❌ No rollback information available"
              exit 1
            fi
          ENDSSH

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key