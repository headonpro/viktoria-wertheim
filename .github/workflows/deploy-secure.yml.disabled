name: Secure Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: true
        type: string

# Prevent concurrent deployments
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # Security scan before deployment
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test
  build-test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run linter
        run: pnpm run lint
        
      - name: Build application
        run: pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # Deploy to production (requires approval)
  deploy:
    runs-on: ubuntu-latest
    needs: [security-scan, build-test]
    environment: 
      name: production
      url: https://viktoria-wertheim.de
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.DEPLOY_USER }}  # Use deploy user, not root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e  # Exit on error
            
            echo "üöÄ Starting secure deployment..."
            
            # Variables
            APP_DIR="/opt/apps/viktoria-wertheim"
            BACKUP_DIR="/opt/backups/viktoria-wertheim"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            
            # Create backup
            echo "üì¶ Creating backup..."
            mkdir -p $BACKUP_DIR
            if [ -d "$APP_DIR" ]; then
              tar -czf "$BACKUP_DIR/backup-$TIMESTAMP.tar.gz" -C "$APP_DIR" .
              # Keep only last 5 backups
              ls -t $BACKUP_DIR/backup-*.tar.gz | tail -n +6 | xargs -r rm
            fi
            
            # Pull latest changes
            echo "üì• Pulling latest changes..."
            cd $APP_DIR
            git fetch origin main
            git reset --hard origin/main
            
            # Verify git status
            echo "üìç Git status:"
            git log -1 --oneline
            
            # Update secrets from GitHub Secrets (stored securely)
            echo "üîê Updating environment variables..."
            cat > .env.production << EOF
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
            SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            ADMIN_EMAILS=${{ secrets.ADMIN_EMAILS }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}
            NODE_ENV=production
            EOF
            
            # Set correct permissions
            chmod 600 .env.production
            
            # Build and deploy with Docker
            echo "üî® Building Docker images..."
            docker-compose -f docker-compose.production.secure.yml build
            
            # Health check before switching
            echo "üè• Running health check..."
            docker-compose -f docker-compose.production.secure.yml up -d web-new
            sleep 10
            
            if curl -f http://localhost:8002/api/health; then
              echo "‚úÖ Health check passed!"
              
              # Blue-green deployment
              echo "üîÑ Switching to new version..."
              docker-compose -f docker-compose.production.secure.yml down
              docker-compose -f docker-compose.production.secure.yml up -d
              
              # Clean up old images
              docker image prune -f
            else
              echo "‚ùå Health check failed! Rolling back..."
              docker-compose -f docker-compose.production.secure.yml down web-new
              exit 1
            fi
            
            # Final status check
            echo "üìä Deployment status:"
            docker ps --format "table {{.Names}}\t{{.Status}}" | grep viktoria || true
            
            # Log deployment
            echo "$TIMESTAMP: Deployment by GitHub Actions - Commit: $(git rev-parse --short HEAD)" >> /var/log/deployments.log
            
            echo "‚úÖ Secure deployment complete!"
            
      - name: Verify deployment
        run: |
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" https://viktoria-wertheim.de)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Site is accessible!"
          else
            echo "‚ùå Site returned status code: $response"
            exit 1
          fi
          
      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '‚úÖ Deployment to production successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Deployment to production failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}