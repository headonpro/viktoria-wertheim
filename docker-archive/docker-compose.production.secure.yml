version: '3.8'

services:
  # Next.js Application - SECURED
  web:
    build: .
    container_name: viktoria-web
    restart: unless-stopped
    ports:
      - "8001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      # Server-side secrets (NOT exposed to client)
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - ADMIN_EMAILS=${ADMIN_EMAILS}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-5}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
    depends_on:
      - postgres
    networks:
      - viktoria-network
    # Security configurations
    user: "1000:1000"  # Run as non-root user
    read_only: true     # Read-only filesystem
    tmpfs:
      - /tmp
      - /app/.next/cache
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database - SECURED
  postgres:
    image: postgres:15-alpine  # Use Alpine for smaller attack surface
    container_name: viktoria-postgres
    restart: unless-stopped
    # DO NOT EXPOSE PORTS IN PRODUCTION!
    # ports:
    #   - "5433:5432"  # REMOVED for security
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    secrets:
      - db_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - viktoria-network
    # Security configurations
    user: "999:999"  # PostgreSQL user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: viktoria-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - web
    networks:
      - viktoria-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Backup Service (Optional)
  backup:
    image: postgres:15-alpine
    container_name: viktoria-backup
    volumes:
      - ./backups:/backups
      - postgres-data:/var/lib/postgresql/data:ro
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    networks:
      - viktoria-network
    command: >
      sh -c "
      while true; do
        PGPASSWORD=$$(cat /run/secrets/db_password) pg_dump -h postgres -U postgres postgres | gzip > /backups/backup-$$(date +%Y%m%d-%H%M%S).sql.gz
        find /backups -name 'backup-*.sql.gz' -mtime +7 -delete
        sleep 86400
      done
      "
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /var/lib/viktoria/postgres-data

networks:
  viktoria-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  db_password:
    file: ./secrets/db_password.txt