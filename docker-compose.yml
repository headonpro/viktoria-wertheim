# Viktoria Wertheim - Optimierte Docker Compose Konfiguration
# 
# Verwendung:
#   Lokal (nur Supabase):     docker-compose --profile dev up -d
#   Production (mit App):     docker-compose --profile prod up -d
#   Alles:                    docker-compose --profile all up -d
#
# Services: Vollständiger Supabase Stack + Next.js App

version: '3.8'

services:
  # ===========================================
  # CORE SERVICES (Immer benötigt)
  # ===========================================
  
  # PostgreSQL Database - Das Herzstück
  db:
    container_name: ${DB_CONTAINER:-supabase-db}
    image: supabase/postgres:15.8.1.060
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_HOST: /var/run/postgresql
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY:-3600}
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./volumes/db/init:/docker-entrypoint-initdb.d:ro
      - ./supabase/migrations:/migrations:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - viktoria-network

  # Kong API Gateway - Router für alle Services
  kong:
    container_name: ${KONG_CONTAINER:-supabase-kong}
    image: kong:2.8.1
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    ports:
      - "${KONG_HTTP_PORT:-8000}:8000"
      - "${KONG_HTTPS_PORT:-8443}:8443"
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: ${KONG_BUFFER_SIZE:-160k}
      KONG_NGINX_PROXY_PROXY_BUFFERS: ${KONG_BUFFERS:-64 160k}
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME:-admin}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    volumes:
      - ./volumes/api/kong.yml:/home/kong/temp.yml:ro
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - viktoria-network

  # PostgREST - REST API für Database
  rest:
    container_name: ${REST_CONTAINER:-supabase-rest}
    image: postgrest/postgrest:v12.2.12
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-postgres}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS:-public,storage}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY:-3600}
    networks:
      - viktoria-network

  # Auth Service - User Authentication
  auth:
    container_name: ${AUTH_CONTAINER:-supabase-auth}
    image: supabase/gotrue:v2.177.0
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    depends_on:
      db:
        condition: service_healthy
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-postgres}
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP:-true}
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: ${ENABLE_ANONYMOUS_USERS:-false}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM:-false}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE:-/auth/v1/verify}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      timeout: 5s
      interval: 5s
      retries: 3
    networks:
      - viktoria-network

  # ===========================================
  # OPTIONAL SERVICES (Profile-basiert)
  # ===========================================

  # Realtime Service - Für Live-Updates
  realtime:
    container_name: ${REALTIME_CONTAINER:-supabase-realtime}
    image: supabase/realtime:v2.34.47
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    depends_on:
      db:
        condition: service_healthy
    environment:
      PORT: 4000
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: supabase_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB:-postgres}
      API_JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE:-${JWT_SECRET}}
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      ERL_AFLAGS: -proto_dist inet_tcp
      DNS_NODES: "''"
      RLIMIT_NOFILE: "10000"
      APP_NAME: realtime
      SEED_SELF_HOST: 'true'
      RUN_JANITOR: 'true'
    networks:
      - viktoria-network

  # Storage Service - Für Datei-Uploads
  storage:
    container_name: ${STORAGE_CONTAINER:-supabase-storage}
    image: supabase/storage-api:v1.25.7
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    depends_on:
      db:
        condition: service_healthy
      rest:
        condition: service_started
      imgproxy:
        condition: service_started
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://supabase_storage_admin:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-postgres}
      FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT:-52428800}
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://imgproxy:5001
    volumes:
      - storage-data:/var/lib/storage
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://storage:5000/status"]
      timeout: 5s
      interval: 5s
      retries: 3
    networks:
      - viktoria-network

  # Image Proxy - Für Bildoptimierung
  imgproxy:
    container_name: ${IMGPROXY_CONTAINER:-supabase-imgproxy}
    image: darthsim/imgproxy:v3.8.0
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENABLE_WEBP_DETECTION: ${IMGPROXY_ENABLE_WEBP_DETECTION:-true}
    volumes:
      - storage-data:/var/lib/storage:ro
    healthcheck:
      test: ["CMD", "imgproxy", "health"]
      timeout: 5s
      interval: 5s
      retries: 3
    networks:
      - viktoria-network

  # Meta Service - Database Introspection
  meta:
    container_name: ${META_CONTAINER:-supabase-meta}
    image: supabase/postgres-meta:v0.91.0
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "prod", "all"]
    depends_on:
      db:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${POSTGRES_DB:-postgres}
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - viktoria-network

  # ===========================================
  # DEVELOPMENT ONLY
  # ===========================================

  # Studio - Admin UI (nur für Development)
  studio:
    container_name: ${STUDIO_CONTAINER:-supabase-studio}
    image: supabase/studio:2025.06.30-sha-6f5982d
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["dev", "all"]  # Nicht in Production!
    ports:
      - "${STUDIO_PORT:-54323}:3000"
    depends_on:
      kong:
        condition: service_healthy
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION:-SV Viktoria Wertheim}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT:-viktoria-wertheim}
      SUPABASE_URL: http://kong:8000
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL:-http://localhost:8000}
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      AUTH_JWT_SECRET: ${JWT_SECRET}
      LOGFLARE_PRIVATE_ACCESS_TOKEN: ${LOGFLARE_PRIVATE_ACCESS_TOKEN}
      LOGFLARE_URL: http://analytics:4000
      NEXT_PUBLIC_ENABLE_LOGS: ${ENABLE_LOGS:-true}
      NEXT_ANALYTICS_BACKEND_PROVIDER: postgres
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://studio:3000/api/platform/profile').then((r) => {if (r.status !== 200) throw new Error(r.status)})"]
      timeout: 10s
      interval: 5s
      retries: 3
    networks:
      - viktoria-network

  # ===========================================
  # PRODUCTION ONLY
  # ===========================================

  # Next.js Web Application
  web:
    container_name: ${WEB_CONTAINER:-viktoria-web}
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile}
      args:
        NODE_ENV: ${NODE_ENV:-development}
    image: viktoria-web:${VERSION:-latest}
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["prod", "all"]  # Nur in Production!
    ports:
      - "${WEB_PORT:-8001}:3000"
    depends_on:
      kong:
        condition: service_healthy
      auth:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      HOSTNAME: "0.0.0.0"
      PORT: 3000
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-https://viktoria-wertheim.de}
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL:-http://kong:8000}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-postgres}
      ADMIN_EMAILS: ${ADMIN_EMAILS}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
    volumes:
      - ./public:/app/public:ro
      - ./.next/cache:/app/.next/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - viktoria-network

  # Backup Service (nur Production)
  backup:
    container_name: ${BACKUP_CONTAINER:-viktoria-backup}
    image: postgres:15-alpine
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["prod"]  # Nur in Production!
    environment:
      PGHOST: db
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-postgres}
    volumes:
      - ./backups:/backups
      - ./scripts/backup-database.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "while true; do
        echo 'Running backup at' $$(date);
        pg_dump -U postgres -h db -d postgres > /backups/backup-$$(date +\%Y\%m\%d-\%H\%M\%S).sql;
        find /backups -name 'backup-*.sql' -mtime +7 -delete;
        sleep 86400;
      done"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - viktoria-network

  # ===========================================
  # OPTIONAL/ADVANCED SERVICES
  # ===========================================

  # Analytics (optional - kann deaktiviert werden)
  analytics:
    container_name: ${ANALYTICS_CONTAINER:-supabase-analytics}
    image: supabase/logflare:1.14.2
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["analytics", "all"]  # Optional
    ports:
      - "${ANALYTICS_PORT:-4000}:4000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      LOGFLARE_NODE_HOST: 127.0.0.1
      DB_USERNAME: supabase_admin
      DB_DATABASE: _supabase
      DB_HOSTNAME: db
      DB_PORT: 5432
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: _analytics
      LOGFLARE_PUBLIC_ACCESS_TOKEN: ${LOGFLARE_PUBLIC_ACCESS_TOKEN}
      LOGFLARE_PRIVATE_ACCESS_TOKEN: ${LOGFLARE_PRIVATE_ACCESS_TOKEN}
      LOGFLARE_SINGLE_TENANT: 'true'
      LOGFLARE_SUPABASE_MODE: 'true'
      LOGFLARE_MIN_CLUSTER_SIZE: 1
      POSTGRES_BACKEND_URL: postgresql://supabase_admin:${POSTGRES_PASSWORD}@db:5432/_supabase
      POSTGRES_BACKEND_SCHEMA: _analytics
      LOGFLARE_FEATURE_FLAG_OVERRIDE: multibackend=true
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4000/health"]
      timeout: 5s
      interval: 5s
      retries: 10
    networks:
      - viktoria-network

  # Edge Functions (optional)
  functions:
    container_name: ${FUNCTIONS_CONTAINER:-supabase-functions}
    image: supabase/edge-runtime:v1.67.4
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["functions", "all"]  # Optional
    depends_on:
      kong:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      SUPABASE_DB_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-postgres}
      VERIFY_JWT: "${FUNCTIONS_VERIFY_JWT:-false}"
    volumes:
      - ./volumes/functions:/home/deno/functions:Z
    command: ["start", "--main-service", "/home/deno/functions/main"]
    networks:
      - viktoria-network

  # Vector Logs (optional)
  vector:
    container_name: ${VECTOR_CONTAINER:-supabase-vector}
    image: timberio/vector:0.28.1-alpine
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["logs", "all"]  # Optional
    volumes:
      - ./volumes/logs/vector.yml:/etc/vector/vector.yml:ro
      - ${DOCKER_SOCKET_LOCATION:-/var/run/docker.sock}:/var/run/docker.sock:ro
    environment:
      LOGFLARE_PUBLIC_ACCESS_TOKEN: ${LOGFLARE_PUBLIC_ACCESS_TOKEN}
    command: ["--config", "/etc/vector/vector.yml"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://vector:9001/health"]
      timeout: 5s
      interval: 5s
      retries: 3
    networks:
      - viktoria-network

# ===========================================
# NETWORKS & VOLUMES
# ===========================================

networks:
  viktoria-network:
    name: viktoria-network
    driver: bridge

volumes:
  db-data:
    driver: local
  storage-data:
    driver: local
  db-config:
    driver: local