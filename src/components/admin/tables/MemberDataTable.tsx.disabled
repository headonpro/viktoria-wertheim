'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/lib/supabase/client';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { IconDots, IconEdit, IconTrash, IconEye, IconSearch, IconPlus, IconMail, IconPhone } from '@tabler/icons-react';
import { format } from 'date-fns';
import { de } from 'date-fns/locale';
import { toast } from 'sonner';

interface Member {
  id: string;
  member_number: string | null;
  first_name: string;
  last_name: string;
  email: string | null;
  phone: string | null;
  date_of_birth: string | null;
  joined_date: string | null;
  membership_type: string | null;
  membership_status: string | null;
  city: string | null;
  created_at: string;
}

interface MemberDataTableProps {
  members: Member[];
}

const membershipTypeConfig = {
  active: {
    label: 'Aktiv',
    variant: 'default' as const,
  },
  passive: {
    label: 'Passiv',
    variant: 'secondary' as const,
  },
  youth: {
    label: 'Jugend',
    variant: 'outline' as const,
  },
  honorary: {
    label: 'Ehrenmitglied',
    variant: 'destructive' as const,
  },
  suspended: {
    label: 'Gesperrt',
    variant: 'outline' as const,
  },
};

const statusConfig = {
  active: {
    label: 'Aktiv',
    variant: 'default' as const,
  },
  inactive: {
    label: 'Inaktiv',
    variant: 'secondary' as const,
  },
  pending: {
    label: 'Ausstehend',
    variant: 'outline' as const,
  },
};

export default function MemberDataTable({ members: initialMembers }: MemberDataTableProps) {
  const router = useRouter();
  const [members, setMembers] = useState(initialMembers);
  const [filteredMembers, setFilteredMembers] = useState(initialMembers);
  const [deleteId, setDeleteId] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [typeFilter, setTypeFilter] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');

  const handleDelete = async () => {
    if (!deleteId) return;

    setIsDeleting(true);
    const supabase = createClient();

    try {
      const { error } = await supabase
        .from('members')
        .delete()
        .eq('id', deleteId);

      if (error) throw error;

      setMembers(prev => prev.filter(member => member.id !== deleteId));
      setFilteredMembers(prev => prev.filter(member => member.id !== deleteId));

      toast.success('Mitglied gelöscht', {
        description: 'Das Mitglied wurde erfolgreich gelöscht.',
      });
    } catch (error: any) {
      console.error('Error deleting member:', error);
      toast.error('Fehler beim Löschen', {
        description: error.message || 'Das Mitglied konnte nicht gelöscht werden.',
      });
    } finally {
      setIsDeleting(false);
      setDeleteId(null);
    }
  };

  // Apply filters
  const applyFilters = () => {
    let filtered = [...members];

    // Apply type filter
    if (typeFilter !== 'all') {
      filtered = filtered.filter(member => member.membership_type === typeFilter);
    }

    // Apply status filter
    if (statusFilter !== 'all') {
      filtered = filtered.filter(member => member.membership_status === statusFilter);
    }

    // Apply search filter
    if (searchTerm) {
      filtered = filtered.filter(member =>
        member.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        member.last_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        member.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        member.member_number?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredMembers(filtered);
  };

  useEffect(() => {
    applyFilters();
  }, [searchTerm, typeFilter, statusFilter]);

  // Calculate age from date of birth
  const calculateAge = (dateOfBirth: string | null) => {
    if (!dateOfBirth) return null;
    const today = new Date();
    const birthDate = new Date(dateOfBirth);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    return age;
  };

  return (
    <>
      <div className="mb-6 space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="relative flex-1">
            <IconSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Name, E-Mail oder Mitgliedsnummer suchen..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          <Select value={typeFilter} onValueChange={setTypeFilter}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Mitgliedsart" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">Alle Arten</SelectItem>
              <SelectItem value="active">Aktiv</SelectItem>
              <SelectItem value="passive">Passiv</SelectItem>
              <SelectItem value="youth">Jugend</SelectItem>
              <SelectItem value="honorary">Ehrenmitglied</SelectItem>
              <SelectItem value="suspended">Gesperrt</SelectItem>
            </SelectContent>
          </Select>

          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">Alle Status</SelectItem>
              <SelectItem value="active">Aktiv</SelectItem>
              <SelectItem value="inactive">Inaktiv</SelectItem>
              <SelectItem value="pending">Ausstehend</SelectItem>
            </SelectContent>
          </Select>

          <Button
            onClick={() => router.push('/admin/members/new')}
            className="whitespace-nowrap"
          >
            <IconPlus className="h-4 w-4 mr-2" />
            Neues Mitglied
          </Button>
        </div>

        <div className="text-sm text-muted-foreground">
          {filteredMembers.length} von {members.length} Mitgliedern
        </div>
      </div>

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Mitgl.-Nr.</TableHead>
              <TableHead>Name</TableHead>
              <TableHead>Kontakt</TableHead>
              <TableHead>Alter</TableHead>
              <TableHead>Mitglied seit</TableHead>
              <TableHead>Typ</TableHead>
              <TableHead>Status</TableHead>
              <TableHead className="w-[100px]">Aktionen</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredMembers.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="h-24 text-center">
                  Keine Mitglieder gefunden.
                </TableCell>
              </TableRow>
            ) : (
              filteredMembers.map((member) => {
                const age = calculateAge(member.date_of_birth);
                return (
                  <TableRow key={member.id}>
                    <TableCell className="font-mono text-sm">
                      {member.member_number || '-'}
                    </TableCell>
                    <TableCell>
                      <div className="font-medium">
                        {member.first_name} {member.last_name}
                      </div>
                      {member.city && (
                        <div className="text-xs text-muted-foreground">
                          {member.city}
                        </div>
                      )}
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        {member.email && (
                          <div className="flex items-center gap-1 text-xs">
                            <IconMail className="h-3 w-3" />
                            <span className="truncate max-w-[150px]">
                              {member.email}
                            </span>
                          </div>
                        )}
                        {member.phone && (
                          <div className="flex items-center gap-1 text-xs">
                            <IconPhone className="h-3 w-3" />
                            {member.phone}
                          </div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      {age !== null ? `${age} Jahre` : '-'}
                    </TableCell>
                    <TableCell>
                      {member.joined_date
                        ? format(new Date(member.joined_date), 'dd.MM.yyyy', { locale: de })
                        : '-'}
                    </TableCell>
                    <TableCell>
                      {member.membership_type && membershipTypeConfig[member.membership_type as keyof typeof membershipTypeConfig] ? (
                        <Badge variant={membershipTypeConfig[member.membership_type as keyof typeof membershipTypeConfig].variant}>
                          {membershipTypeConfig[member.membership_type as keyof typeof membershipTypeConfig].label}
                        </Badge>
                      ) : (
                        '-'
                      )}
                    </TableCell>
                    <TableCell>
                      {member.membership_status && statusConfig[member.membership_status as keyof typeof statusConfig] ? (
                        <Badge variant={statusConfig[member.membership_status as keyof typeof statusConfig].variant}>
                          {statusConfig[member.membership_status as keyof typeof statusConfig].label}
                        </Badge>
                      ) : (
                        '-'
                      )}
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <span className="sr-only">Menü öffnen</span>
                            <IconDots className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Aktionen</DropdownMenuLabel>
                          <DropdownMenuItem
                            onClick={() => router.push(`/admin/members/${member.id}`)}
                          >
                            <IconEye className="mr-2 h-4 w-4" />
                            Anzeigen
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => router.push(`/admin/members/${member.id}/edit`)}
                          >
                            <IconEdit className="mr-2 h-4 w-4" />
                            Bearbeiten
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem
                            onClick={() => setDeleteId(member.id)}
                            className="text-red-600"
                          >
                            <IconTrash className="mr-2 h-4 w-4" />
                            Löschen
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </div>

      <AlertDialog open={!!deleteId} onOpenChange={() => setDeleteId(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Mitglied löschen?</AlertDialogTitle>
            <AlertDialogDescription>
              Diese Aktion kann nicht rückgängig gemacht werden. Das Mitglied wird
              dauerhaft aus der Datenbank gelöscht.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Abbrechen</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              disabled={isDeleting}
              className="bg-red-600 hover:bg-red-700"
            >
              {isDeleting ? 'Wird gelöscht...' : 'Löschen'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}